<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ioc on Tars</title>
    <link>https://gargantuaX.github.io/tags/ioc/</link>
    <description>Recent content in Ioc on Tars</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Wed, 15 Feb 2017 06:20:13 +0000</lastBuildDate>
    
	<atom:link href="https://gargantuaX.github.io/tags/ioc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>两张图让你理解IOC(控制反转)</title>
      <link>https://gargantuaX.github.io/blog/2017-02/%E4%B8%A4%E5%BC%A0%E5%9B%BE%E8%AE%A9%E4%BD%A0%E7%90%86%E8%A7%A3ioc%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</link>
      <pubDate>Wed, 15 Feb 2017 06:20:13 +0000</pubDate>
      
      <guid>https://gargantuaX.github.io/blog/2017-02/%E4%B8%A4%E5%BC%A0%E5%9B%BE%E8%AE%A9%E4%BD%A0%E7%90%86%E8%A7%A3ioc%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/</guid>
      <description>简单理解依赖注入（DI，Dependency injection） 依赖注入通过构造注入，函数调用或者属性的设置来提供组件的依赖关系。就是这么简单。 简单理解控制反转（IOC，(Inversion of Control） 一开始我们代码依赖关系可能是如图这样的，这里只举例了3个对象和三个类的交叉依赖，我们代码的依赖关系实际情况其实要复杂得多，脑补十多个对象的交叉，甚至还有横向交叉。 现在问题来了，由于不可抗拒的原</description>
    </item>
    
  </channel>
</rss>